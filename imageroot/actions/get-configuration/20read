#!/usr/bin/env python3

#
# Copyright (C) 2022 Nethesis S.r.l.
# SPDX-License-Identifier: GPL-3.0-or-later
#

#
# Read configuration
#

import os
import sys
import json
import agent

# Prepare return variable
config = {}

# Read current configuration from the environment file
config["host"] = os.getenv("TRAEFIK_HOST","")
config["http2https"] = os.getenv("TRAEFIK_HTTP2HTTPS") == "True"
config["lets_encrypt"] = os.getenv("TRAEFIK_LETS_ENCRYPT") == "True"

# Dump the configuration to stdout
# json.dump(config, fp=sys.stdout)
if os.path.exists("planka.env"): 
	data = agent.read_envfile("planka.env") 
	config["BASE_URL"] = data.get("BASE_URL", "http://localhost:3000") 
	config["DATABASE_URL"] = data.get("DATABASE_URL", "postgresql://postgres@postgres/planka") 
	config["SECRET_KEY"] = data.get("SECRET_KEY", "notsecretkey") 
else: 
	config["BASE_URL"] = "http://localhost:3000" 
	config["DATABASE_URL"] = "postgresql://postgres@postgres/planka" 
	config["SECRET_KEY"] = "notsecretkey" 
 
if os.path.exists("postgres.env"): 
	data = agent.read_envfile("postgres.env") 
	config["POSTGRES_DB"] = data.get("POSTGRES_DB", "planka") 
	config["POSTGRES_HOST_AUTH_METHOD"] = data.get("POSTGRES_HOST_AUTH_METHOD", "trust") 
else: 
	config["POSTGRES_DB"] = "planka" 
	config["POSTGRES_HOST_AUTH_METHOD"] = "trust" 
 
json.dump(config, fp=sys.stdout)
